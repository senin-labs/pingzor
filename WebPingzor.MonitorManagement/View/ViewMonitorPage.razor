@page "/monitors/{monitorId:int}"
@attribute [Authorize]
@rendermode InteractiveServer

@inject PingzorDbProvider _dbProvider
@inject IAuthService _authService

<PageTitle>Pingzor | Monitors</PageTitle>

@if (errorMessage != null)
{
  <Paragraph>@errorMessage</Paragraph>
  return;
}
@if (monitor == null)
{
  <Paragraph>Loading</Paragraph>
  return;
}

<Title Level="2">@monitor.Name</Title>

<Table TItem="StatusCheck" DataSource="@statusChecks">
  <ColumnDefinitions>
    <PropertyColumn Property="c=>c.CheckedAt">
      @context.CheckedAt.ToString("yyyy-MM-dd HH:mm:ss")
    </PropertyColumn>
    <PropertyColumn Property="c=>c.IsUp">
      @if (context.IsUp)
      {
        <Tag Color="TagColor.Green">up</Tag>
      }
      else
      {
        <Tag Color="TagColor.Magenta">down</Tag>
      }
    </PropertyColumn>
    <PropertyColumn Property="c=>c.StatusCode">
      @context.StatusCode
    </PropertyColumn>
    <PropertyColumn Property="c=>c.Latency">
      @context.Latency
    </PropertyColumn>
  </ColumnDefinitions>
</Table>

@code {
  [Parameter]
  public int MonitorId { get; set; }

  private record Monitor(string Name, string Url, int Interval);
  private record StatusCheck(DateTime CheckedAt, bool IsUp, int StatusCode, int Latency);

  private Monitor? monitor;
  private List<StatusCheck>? statusChecks;

  private string? errorMessage;
  protected async override Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    var userId = await _authService.GetUserId();
    using var db = _dbProvider.Create();

    monitor = await db.HttpMonitors.AsNoTracking()
    .Where(m => m.Id == MonitorId && m.UserId == userId)
    .Select(m => new Monitor(m.Name, m.Url, m.Interval))
    .FirstOrDefaultAsync();
    if (monitor == null)
    {
      errorMessage = "Monitor not found";
      return;
    }

    this.statusChecks = await db.MonitorStatusChecks
    .AsNoTracking().Where(c => c.MonitorId == MonitorId)
    .OrderByDescending(c => c.CheckedAt)
    .Select(c => new StatusCheck(c.CheckedAt, c.IsOnline, c.StatusCode, c.Latency))
    .Take(10).ToListAsync();
  }

}