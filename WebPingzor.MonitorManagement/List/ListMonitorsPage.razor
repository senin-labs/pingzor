@page "/monitors"
@attribute [StreamRendering]
@attribute [Authorize]

@inject IAuthService _authService
@inject PingzorDbProvider _dbProvider


<PageTitle>Pingzor | Monitors</PageTitle>

<Title Level="2">Monitors</Title>

@if (monitors == null)
{
  <p>Loading...</p>
}
else
{
  <Table TItem="MonitorItem" DataSource="@monitors">
  <TitleTemplate>
    <Flex Justify="FlexJustify.End" Gap="@("10")">
      <NavLink href="/monitors/create">
        <Button Type="ButtonType.Primary">Create</Button>
      </NavLink>
    </Flex>
  </TitleTemplate>
  <ColumnDefinitions>
    <PropertyColumn Property="c=>c.Name">
      <NavLink href="@string.Format("/monitors/{0}", context.Id)">@context.Name</NavLink>
    </PropertyColumn>
    <PropertyColumn Property="c=>c.Interval">
      @context.Interval<span>s</span>
    </PropertyColumn>
    <PropertyColumn Property="c=>c.Interval">
      <NavLink href="@string.Format("/monitors/{0}/edit", context.Id)">
        <Button Type="ButtonType.Link">edit</Button>
      </NavLink>
    </PropertyColumn>
  </ColumnDefinitions>
</Table>
}


@code {
  record MonitorItem(int Id, string Name, int Interval);
  private List<MonitorItem>? monitors;
  protected async override Task OnInitializedAsync()
  {
    var userId = await _authService.GetUserId();
    using var db = _dbProvider.Create();
    monitors = await db.HttpMonitors
    .Where(m => m.UserId == userId)
    .Select(m => new MonitorItem(m.Id, m.Name, m.Interval))
    .ToListAsync();
  }
}