@page "/monitors/{monitorId:int}/edit"
@rendermode InteractiveServer
@attribute [Authorize]

@inject WebPingzor.MonitorManagement.MonitorService _monitorService
@inject IToasterService _toasterService
@inject ILogger<EditMonitorPage> _logger

<PageTitle>Pingzor | Edit @(model?.Name ?? "Monitor")</PageTitle>

@if (errorMessage != null)
{
  <p>@errorMessage</p>
  return;
}

@if (model == null)
{
  <p>Loading...</p>
  return;
}

<Title Level="2">Edit @model.Name</Title>

<MonitorForm Model="@model" OnSubmit="OnFormSubmit" />
<ToasterContainer />


@code {
  [Parameter]
  public required int MonitorId { get; set; }

  private MonitorForm.FormModel? model;
  private string? errorMessage;

  protected async override Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    model = await _monitorService.QueryMonitor((monitors) => monitors
    .Where(m => m.Id == this.MonitorId)
    .Select(m => new MonitorForm.FormModel
      {
        Name = m.Name,
        Url = m.Url,
        Interval = m.Interval
      })
    );

    if (model == null)
    {
      errorMessage = "Monitor not found.";
      return;
    }
  }

  private async Task OnFormSubmit(EditContext editContext)
  {
    if (model == null) return;

    try
    {
      await _monitorService.Update(this.MonitorId, model.Name, model.Url, model.Interval);
      _toasterService.Success("Saved", "Monitor updated successfully!");
    }
    catch (ValidationException ex)
    {
      _toasterService.Error("Error", ex.Message);
    }
    catch (Exception ex)
    {
      _logger.LogError(ex, "Failed to update monitor");
      _toasterService.Error("Error", "An error occurred while updating the monitor.");
    }
  }
}