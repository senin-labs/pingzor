@page "/login"

@inject WebPingzor.Core.IAuthService _authService
@inject NavigationManager _navigationManager
@inject ILogger<LoginPage> _logger

<PageTitle>Login</PageTitle>

<Title>Login</Title>

<Form @ref="form" Layout="FormLayout.Vertical" Method="HttpMethod.Post" Model="@model" Name="login-form"
  OnFinish="OnFinish" WrapperColSpan="8">
  <FormItem Label="User Name">
    <Input @bind-Value="@model.Username" />
  </FormItem>
  <FormItem Label="Password">
    <InputPassword @bind-Value="@model.Password" />
  </FormItem>
  <FormItem Label="">
    <Checkbox @bind-Value="model.RememberMe">Remember me</Checkbox>
  </FormItem>
  <FormItem>
    <Button Type="ButtonType.Primary" HtmlType="submit">
      Submit
    </Button>
  </FormItem>
</Form>

<Flex Gap="@FlexGap.Small">
  <NavLink Href="/register">Register</NavLink>
  <NavLink Href="/forgot-password">Forgot Password</NavLink>
</Flex>

@code
{
  [SupplyParameterFromQuery]
  private string? ReturnUrl { get; set; }

  [SupplyParameterFromForm(FormName = "login-form")]
  private LoginModel model { get; set; } = new LoginModel();
  private Form<LoginModel>? form { get; set; }

  private async Task OnFinish(EditContext editContext)
  {
    try
    {
      await _authService.Login(model.Username, model.Password);
    }
    catch (ValidationException ex)
    {
      form?.SetValidationMessages("Password", [ex.Message]);
      return;
    }
    catch (Exception ex)
    {
      _logger.LogError(ex, ex.InnerException?.Message ?? ex.Message);
      form?.SetValidationMessages("Password", ["Something went wrong. Try again.", "Please contact support if the problem persists."]);
      return;
    }

    var redirectUrl = ReturnUrl ?? "/";
    _navigationManager.NavigateTo(redirectUrl);
  }
}